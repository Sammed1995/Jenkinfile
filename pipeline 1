def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline{
    agent any
    toold {
        maven "MAVEN3"
        jdk "OracleJDK11"
    }
    stages {
        stage ( "Fetch the source code ") {
            steps{
                git branch:'main', url: 'git CICD url'
            }
        }
        stage ("Build the Source code") {
            steps{
                sh 'mvn clean install - DskipTest'
            }
            post {
                sucess {
                    echo "archiving the artifact now"
                          archivingArtifact artifacts:'**/*.war'
                }
            }
        }
        stage (" test code") {
            steps {
                sh 'mvn  test'
            }
        }
        stage( " Checkstyle analysis") {
            steps {
                sh 'mvn checkstyle : checkstyle'
            }
        }
        stage("Sonarqube Analysis"){
            environment {
                scannerHome = tool 'sonar 4.7'
            }
            steps{
                withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }

        }
        stage("Quality Gate"){
          timeout(time: 1, unit: 'HOURS') {
                  waitForQualityGate abortPipeline: true
              
              }
          }
          stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '172.31.18.28:8081',
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'vprofile-repo',
                  credentialsId: 'nexuslogin',
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
    ]
 )
            }
        }
      }
    
    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
